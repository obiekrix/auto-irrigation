/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.autoirrigation;

import com.autoirrigation.model.ApiError;
import com.autoirrigation.model.Plot;
import com.autoirrigation.model.Slot;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-18T21:23:12.338624+01:00[Africa/Luanda]")
@Validated
@Api(value = "irrigation", description = "the irrigation API")
public interface IrrigationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /irrigation/plot/create : Add a new plot of land for irrigation.
     * In success case, Http Code 201 will be returned.
     *
     * @param plot Irrigation Plot to Add (required)
     * @return Plot successfully created (status code 201)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Add a new plot of land for irrigation.", nickname = "addPlot", notes = "In success case, Http Code 201 will be returned.", tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Plot successfully created"),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @PostMapping(
        value = "/irrigation/plot/create",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addPlot(@ApiParam(value = "Irrigation Plot to Add" ,required=true )  @Valid @RequestBody Plot plot) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /irrigation/slot/create : Add a new time slot for the specified plot id.
     * In success case, Http Code 201 will be returned.
     *
     * @param slot Irrigation Plot to Add (required)
     * @return Time slot successfully created (status code 201)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Add a new time slot for the specified plot id.", nickname = "addSlot", notes = "In success case, Http Code 201 will be returned.", tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Time slot successfully created"),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @PostMapping(
        value = "/irrigation/slot/create",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addSlot(@ApiParam(value = "Irrigation Plot to Add" ,required=true )  @Valid @RequestBody Slot slot) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /irrigation/slot/configure/id/{id} : Configure the irrigation plan for a plot and time slot.
     * In success case, Http Code 200 will be returned.
     *
     * @param id The id of the slot to configure (required)
     * @param slot Configuration details for time slot (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Configure the irrigation plan for a plot and time slot.", nickname = "configureSlot", notes = "In success case, Http Code 200 will be returned.", response = Long.class, tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @PutMapping(
        value = "/irrigation/slot/configure/id/{id}",
        produces = { "application/json", "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Long> configureSlot(@ApiParam(value = "The id of the slot to configure",required=true) @PathVariable("id") Long id,@ApiParam(value = "Configuration details for time slot" ,required=true )  @Valid @RequestBody Slot slot) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /irrigation/plot/list : Get all plots.
     * In success case, Http Code 200 will be returned.
     *
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Get all plots.", nickname = "getAllPlots", notes = "In success case, Http Code 200 will be returned.", response = Plot.class, responseContainer = "List", tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Plot.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @GetMapping(
        value = "/irrigation/plot/list",
        produces = { "application/json", "*/*" }
    )
    default ResponseEntity<List<Plot>> getAllPlots() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"soilMoistureLevel\" : 0.8008281904610115, \"name\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"soilMoistureLevel\" : 0.8008281904610115, \"name\" : \"name\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /irrigation/slot/id/{plotId}/list : Get all time slot for a specified plot id.
     * In success case, Http Code 200 will be returned.
     *
     * @param plotId The id of the plot to whose time slots we want to query (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Get all time slot for a specified plot id.", nickname = "getAllSlotsForPlot", notes = "In success case, Http Code 200 will be returned.", response = Slot.class, responseContainer = "List", tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Slot.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @GetMapping(
        value = "/irrigation/slot/id/{plotId}/list",
        produces = { "application/json", "*/*" }
    )
    default ResponseEntity<List<Slot>> getAllSlotsForPlot(@ApiParam(value = "The id of the plot to whose time slots we want to query",required=true) @PathVariable("plotId") Long plotId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"period\" : 0, \"plotId\" : 1, \"amountOfWater\" : 6 }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"period\" : 0, \"plotId\" : 1, \"amountOfWater\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /irrigation/slot/delete/id/{id} : Remove a time slot.
     * In success case, Http Code 200 will be returned.
     *
     * @param id The id of the slot to delete (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Remove a time slot.", nickname = "removeSlot", notes = "In success case, Http Code 200 will be returned.", response = Long.class, tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @DeleteMapping(
        value = "/irrigation/slot/delete/id/{id}",
        produces = { "application/json", "*/*" }
    )
    default ResponseEntity<Long> removeSlot(@ApiParam(value = "The id of the slot to delete",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /irrigation/request : Request for a plot to be irrigated at the clocking of a time slot.
     * In success case, Http Code 200 will be returned.
     *
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Request for a plot to be irrigated at the clocking of a time slot.", nickname = "requestIrrigation", notes = "In success case, Http Code 200 will be returned.", response = Integer.class, tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Integer.class),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @PostMapping(
        value = "/irrigation/request",
        produces = { "application/json", "*/*" }
    )
    default ResponseEntity<Integer> requestIrrigation() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /irrigation/plot/update/id/{id}/name/{name} : Change the plot details such as name and irrigation interval.
     * In success case, Http Code 200 will be returned.
     *
     * @param id The id of the plot to update (required)
     * @param name The new name for the plot (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @ApiOperation(value = "Change the plot details such as name and irrigation interval.", nickname = "updatePlot", notes = "In success case, Http Code 200 will be returned.", response = Long.class, tags={ "IrrigationAPI", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Long.class),
        @ApiResponse(code = 400, message = "Bad request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal server error", response = ApiError.class) })
    @PutMapping(
        value = "/irrigation/plot/update/id/{id}/name/{name}",
        produces = { "application/json", "*/*" }
    )
    default ResponseEntity<Long> updatePlot(@ApiParam(value = "The id of the plot to update",required=true) @PathVariable("id") Long id,@ApiParam(value = "The new name for the plot",required=true) @PathVariable("name") String name) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
